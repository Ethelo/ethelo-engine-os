#pragma once

namespace ethelo
{
	class MathProgram;
	class decision;
    class interface
    {
    public:
        class parameter_error : public std::runtime_error { using std::runtime_error::runtime_error; };
		
		/*
			solve(...) is a function for solving a decision instance.
		Inputs:
			decision_json  : string content of decision.json
			influents_json : string content of influents.json
			weights_json   : string content of weights.json
			config_json    : [OPTIONAL] string content of config.json
			preproc_data   : [OPTIONAL] a string containing preprocessed data
		Output:
		  A string (in JSON format) that contains the solutions/sceneario required
		Assumptions:
		  preproc_data is a string returned by (perhaps an old version of) the
		    preproc(...) function below. 
		Exceptions:
		  - Throws std::invalid_argument if preproc_data is outdated. That is,
			when preproc_data is provided but either
		    1) does not correspond to the decision_json inputted; or
			2) was generated by an engine of older version
		*/
        static std::string solve(const std::string& decision_json, const std::string& influents_json, const std::string& weights_json, const std::string& config_json = "", const std::string& preproc_data="");

		
        static void validate(const std::string& type, const std::string& code);
        
		//version() returns the current code version
		static std::string version();
		
		/*
			hash(...) returns hash value of provided string.
		Input:
			decision_json: string content of decision.json
		Output:
			hashed value of decision_json, as string
		Exceptions:
			This function should not raise any exceptions
		*/
		static std::string hash(const std::string& decision_json);
		
		/*
			preproc(...) preprocesses a decision file and returns the data
			that need to be saved. The string returned is intended to be passed
			to the preproc_data field in the solve(...) function defined above.
		Input:
			decision_json: string content of a decision.json file
		Output:
			a string containing data that needs to be stored
		Exceptions:
			Does not raise exceptions unless decision_json is ill-formatted
		*/
		static std::string preproc(const std::string& decision_json);
		
    protected:
        static void initLogger();
		
		//preproc_MP(dec) preprocesses a decision [dec] and returns the 
		//  translated result as a MathProgram. This is used as a subprocedure
		//  in both solve(...) and preproc(...)
		//Warnings:
		// 1. Caller is responsble for freeing returned object
		// 2. This modifies/overwrites votes of [dec]
		static MathProgram* preproc_MP(decision& dec);
		
    };

}
